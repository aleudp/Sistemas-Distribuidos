version: '3.8'

services:
  # Servicio de PostgreSQL principal (cache)
  postgres:
    image: postgres:13
    container_name: postgres_db
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: dns_cache
    volumes:
      - ./init_dns_cache.sql:/docker-entrypoint-initdb.d/init_dns_cache.sql  # Crear la tabla dns_queries
    ports:
      - "5432:5432"
    networks:
      - app-network

  # Servicio de PostgreSQL de memoria (cliente DNS)
  postgres_memory:
    image: postgres:13
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: domains_db
    ports:
      - "5433:5433"
    networks:
      - app-network
    volumes:
      - ./init_csv_table.sql:/docker-entrypoint-initdb.d/init_csv_table.sql
      - ./3rd_lev_domains.csv:/docker-entrypoint-initdb.d/3rd_lev_domains.csv
      - ./postgres_memory_data:/var/lib/postgresql/data

  # Servicio Redis (cache)
  redis1:
    image: redis:alpine
    container_name: redis1
    command: ["redis-server", "--maxmemory", "2mb", "--maxmemory-policy", "allkeys-lfu"]
    ports:
      - "6380:6379"
    networks:
      - app-network

  redis2:
    image: redis:alpine
    container_name: redis2
    command: ["redis-server", "--maxmemory", "10mb", "--maxmemory-policy", "allkeys-lfu"]
    ports:
      - "6381:6379"
    networks:
      - app-network

  redis3:
    image: redis:alpine
    container_name: redis3
    command: ["redis-server", "--maxmemory", "10mb", "--maxmemory-policy", "allkeys-lfu"]
    ports:
      - "6382:6379"
    networks:
      - app-network

  redis4:
    image: redis:alpine
    container_name: redis4
    command: ["redis-server", "--maxmemory", "10mb", "--maxmemory-policy", "allkeys-lfu"]
    ports:
      - "6383:6379"
    networks:
      - app-network

  redis5:
    image: redis:alpine
    container_name: redis5
    command: ["redis-server", "--maxmemory", "10mb", "--maxmemory-policy", "allkeys-lfu"]
    ports:
      - "6384:6379"
    networks:
      - app-network

  redis6:
    image: redis:alpine
    container_name: redis6
    command: ["redis-server", "--maxmemory", "10mb", "--maxmemory-policy", "allkeys-lfu"]
    ports:
      - "6385:6379"
    networks:
      - app-network

  redis7:
    image: redis:alpine
    container_name: redis7
    command: ["redis-server", "--maxmemory", "10mb", "--maxmemory-policy", "allkeys-lfu"]
    ports:
      - "6386:6379"
    networks:
      - app-network

  redis8:
    image: redis:alpine
    container_name: redis8
    command: ["redis-server", "--maxmemory", "10mb", "--maxmemory-policy", "allkeys-lfu"]
    ports:
      - "6387:6379"
    networks:
      - app-network

  # Servicio del servidor gRPC
  grpc_server:
    build: ./server  # El servidor gRPC con Redis y PostgreSQL
    container_name: grpc_server
    command: python3 -u server.py
    volumes:
      - ./server:/usr/src/app
    depends_on:
      - postgres
      - redis1
      - redis2
      - redis3
      - redis4
      - redis5
      - redis6
      - redis7
      - redis8
    ports:
      - "50051:50051"  # Puerto para gRPC
    networks:
      - app-network
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_DB: dns_cache
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      REDIS_HOST: redis1

  # Servicio del cliente gRPC
  client:
    build: ./client  # Cliente que genera tr√°fico
    container_name: client
    command: python3 -u client.py
    volumes:
      - ./client:/usr/src/app
    depends_on:
      - grpc_server
    networks:
      - app-network
    environment:
      GRPC_SERVER_HOST: grpc_server
      GRPC_SERVER_PORT: 50051  

# Definir la red 'app-network'
networks:
  app-network:
    driver: bridge

